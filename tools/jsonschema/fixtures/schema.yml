$schema: http://json-schema.org/draft-04/hyper-schema
type: object
title: Example Schemata
description: Example schemata for go-jsonschema.
links:
- href: https://api.example.com
  rel: self
definitions:
  album:
    $schema: http://json-schema.org/draft-04/hyper-schema
    definitions:
      album_id:
        description: unique identifier of album
        example: 942b46e5-893b-41ba-88da-d6aef7dddc31
        format: uuid
        readOnly: true
        type: string
      created_at:
        description: when album was created
        format: date-time
        readOnly: true
        type: string
      deleted_at:
        description: when album was deleted
        format: date-time
        type: string
      file:
        description: attachment of album
        example: '... contents of file ...'
        readOnly: false
        type: string
      liked_user_ids:
        description: list of users' id who liked album
        items:
          $ref: '#/definitions/user/definitions/user_id'
        type: array
      name:
        description: name of album
        example: my album
        type: string
      private:
        description: whether to be private
        example: false
        type: boolean
      updated_at:
        description: when album was updated
        format: date-time
        readOnly: true
        type: string
      user:
        $ref: '#/definitions/user'
    links:
    - description: Create a new album.
      href: /albums
      method: POST
      rel: create
      schema:
        properties:
          name:
            $ref: '#/definitions/album/definitions/name'
        type: object
      title: Create
    - description: List existing albums.
      href: /albums
      method: GET
      rel: instances
      title: List
    - description: Read an existing album.
      href: /albums/{(#/definitions/album/definitions/album_id)}
      method: GET
      rel: self
      title: Read
    - description: Update an existing album.
      href: /albums/{(#/definitions/album/definitions/album_id)}
      method: PATCH
      rel: update
      schema:
        properties:
          name:
            $ref: '#/definitions/album/definitions/name'
        type: object
      title: Update
    - description: Delete an existing album.
      href: /albums/{(#/definitions/album/definitions/album_id)}
      mediaType: "null"
      method: DELETE
      rel: destroy
      title: Delete
    - description: Upload an attachment file for an album.
      encType: multipart/form-data
      href: /albums/{(#/definitions/album/definitions/album_id)}/files
      method: POST
      rel: create
      schema:
        properties:
          file:
            $ref: '#/definitions/album/definitions/file'
        type: object
      title: Create
    properties:
      created_at:
        $ref: '#/definitions/album/definitions/created_at'
      deleted_at:
        $ref: '#/definitions/album/definitions/deleted_at'
      id:
        $ref: '#/definitions/album/definitions/album_id'
      liked_user_ids:
        $ref: '#/definitions/album/definitions/liked_user_ids'
      name:
        $ref: '#/definitions/album/definitions/name'
      private:
        $ref: '#/definitions/album/definitions/private'
      updated_at:
        $ref: '#/definitions/album/definitions/updated_at'
      user:
        $ref: '#/definitions/album/definitions/user'
    title: Album
    type: object
  user:
    $schema: http://json-schema.org/draft-04/hyper-schema
    definitions:
      created_at:
        description: when user was created
        format: date-time
        readOnly: true
        type: string
      email:
        description: unique email address of user
        example: gopher@example.com
        format: email
        type: string
      file:
        description: user icon
        example: '... contents of file ...'
        type: string
      icon:
        description: user icon
        example: http://example.com/icon.png
        format: uri
        type: string
      name:
        description: name of user
        example: Gopher
        type: string
      updated_at:
        description: when user was updated
        format: date-time
        readOnly: true
        type: string
      user_id:
        description: unique identifier of user
        example: 512446121
        readOnly: true
        type: integer
    links:
    - description: Create a user.
      href: /users
      method: POST
      schema:
        $ref: '#/definitions/user'
      title: Create
    - description: Read users list.
      href: /users
      method: GET
      title: ReadList
    - description: Read user.
      href: /users/{(#/definitions/user/definitions/user_id)}
      method: GET
      title: Read
    - description: Upload an icon file for user.
      encType: multipart/form-data
      href: /users/{(#/definitions/user/definitions/user_id)}/icons
      method: POST
      rel: create
      schema:
        properties:
          icon:
            $ref: '#/definitions/user/definitions/file'
        type: object
      title: Create
    - description: Delete user.
      href: /users/{(#/definitions/user/definitions/user_id)}
      mediaType: "null"
      method: DELETE
      title: Delete
    properties:
      created_at:
        $ref: '#/definitions/user/definitions/created_at'
      email:
        $ref: '#/definitions/user/definitions/email'
      icon:
        $ref: '#/definitions/user/definitions/icon'
      id:
        $ref: '#/definitions/user/definitions/user_id'
      name:
        $ref: '#/definitions/user/definitions/name'
      updated_at:
        $ref: '#/definitions/user/definitions/updated_at'
    title: User
    type: object
properties:
  album:
    $ref: '#/definitions/album'
  user:
    $ref: '#/definitions/user'
