// Code generated by go-bindata.
// sources:
// fixtures/schema.md.tmpl
// DO NOT EDIT!

package doc

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path"
	"path/filepath"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _fixturesSchemaMdTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x54\xc1\x8e\xd3\x30\x10\xbd\xfb\x2b\xac\xed\x1e\xa0\x62\x53\xed\xb5\x12\x17\x60\x51\x0f\x20\xca\xb6\x37\x84\x14\x6b\x63\x36\x16\xad\x1d\xec\xa9\x44\x15\xe5\xdf\x19\xc7\x76\xe3\x38\x0e\x94\xfb\xee\x25\xf1\xcc\xf3\x9b\x79\x2f\x6f\xbb\xa0\x6d\x5b\xec\x05\x1c\x78\xd7\x11\x7c\xfd\xc0\xcd\x93\x16\x0d\x08\x25\xb1\x80\x15\xcd\xe4\x33\xa7\xb7\x92\x1d\xf9\x1b\x7a\x6b\x9e\x6a\x7e\x64\x74\xfd\x96\x16\x5b\xad\x1a\xae\x41\x70\x53\xec\xfa\xaa\xe9\xba\x3b\xfa\xad\x6d\x3d\x28\xb0\x7e\x7f\xd5\xb6\x27\x7d\xd8\x30\x53\xd3\xa4\xf5\x7a\xe0\x17\x48\x7e\x10\xf2\xa7\xa5\x0e\xa8\x4f\x78\x46\x52\x4a\x1d\xad\x6d\x17\x9f\x39\xd4\xaa\x7a\x90\x55\xa3\x84\x84\x84\x3d\x8b\xb0\x43\xb8\xac\xba\xce\x3f\xfe\x57\x13\x59\x58\x8f\x92\xcd\xad\x33\xe2\xc7\x65\xd3\x91\x6b\x03\x78\x62\x66\xbf\xc0\x02\x09\x87\x41\x53\x8f\x1b\xd7\x3b\xc7\x56\xe4\xcd\x5e\x2e\x71\x96\xbd\xd5\x75\xcb\xa5\xdf\x28\xdc\x1e\x0f\xb7\x1e\x62\x5f\x1a\x6c\x6d\x38\xab\xf2\x38\x7a\x43\xf1\xef\xa6\xf7\xc8\x5b\x36\xa2\x7c\xf8\xcd\x8e\x8d\x95\x6f\xe9\xfc\x61\x4d\x4b\x5c\x62\x0a\x29\x67\x38\xf6\xe7\xc6\x13\xd8\xb7\x35\x8d\x2f\xbb\xde\xcc\xc5\x2d\x03\xe0\xda\x6b\xf1\x07\x1c\xbe\x8a\x09\x2e\x98\xd5\xdc\xf8\x8f\x4a\x1f\x19\x38\x12\xf7\x3e\x5e\x21\xf4\x67\xae\x3f\xa2\x77\x5f\xe4\xe1\xec\x08\xc2\x69\x4c\x31\x60\x92\xe4\x5d\x13\x76\x42\x16\x2e\x6f\xd9\x2c\x87\xd8\xf5\xcd\x34\x74\xd3\x22\x19\xab\xe8\x01\x2e\x3e\xd1\x32\xb9\xd4\x45\xc8\x6c\xf4\x7a\x3e\xa9\x20\xeb\xcc\x4b\x2e\xaf\xcb\x65\xe6\x41\xca\xb2\xac\x01\x1a\x32\x0e\x00\x72\x87\x82\xd7\x31\x44\x22\x34\xbe\x9e\xb8\x3e\xef\x40\x0b\xf9\x8c\xf0\xcd\x7e\xbf\x5d\xdd\x17\xf7\xd1\x87\xc7\x9f\xc8\x47\xfe\xeb\xc4\x0d\xbc\x53\x95\x0d\xe7\x7b\x25\x81\x4b\xb8\xbb\xe8\xed\x61\x1e\xe3\x9b\x4e\x79\xd8\x6e\xa3\x8c\xfb\x77\xf1\x99\xb5\xe7\x51\xb8\x26\x33\x48\x42\xeb\xca\x91\x5a\x72\x91\x1c\x56\x8e\x36\x31\x8d\xc2\x64\xec\x80\xc1\xc9\x44\x1e\x84\x06\x46\xce\x28\xb9\xad\x35\x33\x7c\xba\x86\xc3\xfc\x43\xab\x03\xe5\xc4\xfe\x95\x8e\xa4\x0c\x13\x5d\xc9\x77\xfd\x13\x00\x00\xff\xff\x60\x97\x99\x3a\x67\x07\x00\x00")

func fixturesSchemaMdTmplBytes() ([]byte, error) {
	return bindataRead(
		_fixturesSchemaMdTmpl,
		"fixtures/schema.md.tmpl",
	)
}

func fixturesSchemaMdTmpl() (*asset, error) {
	bytes, err := fixturesSchemaMdTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "fixtures/schema.md.tmpl", size: 1895, mode: os.FileMode(420), modTime: time.Unix(1437468691, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"fixtures/schema.md.tmpl": fixturesSchemaMdTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"fixtures": &bintree{nil, map[string]*bintree{
		"schema.md.tmpl": &bintree{fixturesSchemaMdTmpl, map[string]*bintree{
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, path.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        // File
        if err != nil {
                return RestoreAsset(dir, name)
        }
        // Dir
        for _, child := range children {
                err = RestoreAssets(dir, path.Join(name, child))
                if err != nil {
                        return err
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

