// Code generated by jsonschema.
// DO NOT EDIT!

package main

import (
	"fmt"
	"time"

	"github.com/go-martini/martini"
)

func Route(r martini.Router) {
	r.AddRoute("POST", "/albums", CreateAlbum)
	r.AddRoute("GET", "/albums", ReadAlbums)
	r.AddRoute("GET", "/albums/:album_id", ReadAlbum)
	r.AddRoute("PATCH", "/albums/:album_id", UpdateAlbum)
	r.AddRoute("DELETE", "/albums/:album_id", DeleteAlbum)
	r.AddRoute("POST", "/albums/:album_id/files", CreateAttachment)
	r.AddRoute("POST", "/users", CreateUser)
	r.AddRoute("GET", "/users", ReadUsers)
	r.AddRoute("GET", "/users/:user_id", ReadUser)
	r.AddRoute("POST", "/users/:user_id/icons", CreateUser)
	r.AddRoute("DELETE", "/users/:user_id", DeleteUser)
}

type Album struct {
	CreatedAt    time.Time `json:"created_at"`
	DeletedAt    time.Time `json:"deleted_at"`
	ID           string    `json:"id"`
	LikedUserIds []int64   `json:"liked_user_ids"`
	Name         string    `json:"name"`
	Private      bool      `json:"private"`
	TaggedUsers  []User    `json:"tagged_users"`
	UpdatedAt    time.Time `json:"updated_at"`
	User         User      `json:"user"`
}

func (a Album) Validate() (errs []error) {
	errs = []error{}
	return errs
}

type User struct {
	CreatedAt  time.Time `json:"created_at"`
	Email      string    `json:"email"`
	Icon       string    `json:"icon"`
	ID         int64     `json:"id"`
	Name       string    `json:"name"`
	ScreenName string    `json:"screen_name"`
	UpdatedAt  time.Time `json:"updated_at"`
}

func (u User) Validate() (errs []error) {
	errs = []error{}
	return errs
}

type MaxItemsError struct {
	Max    int
	Length int
}

func (err MaxItemsError) Error() string {
	return fmt.Sprintf("MaxItemError: %d is defined as max, but actual %d", err.Max, err.Length)
}

func MaxItems(items []interface{}, max int) error {
	length := len(items)
	if length > max {
		return MaxItemsError{max, length}
	}
	return nil
}

type MinItemError struct {
	Min    int
	Length int
}

func (err MinItemsError) Error() string {
	return fmt.Sprintf("MinItemError: %d is defined as max, but actual %d", err.Min, err.Length)
}

func MinItems(items []interface{}, min int) error {
	length := len(items)
	if length < min {
		return MinItemsError{min, length}
	}
	return nil
}
