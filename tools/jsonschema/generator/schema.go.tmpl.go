// Code generated by go-bindata.
// sources:
// ../generator/schema.go.tmpl
// DO NOT EDIT!

package generator

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path"
	"path/filepath"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _GeneratorSchemaGoTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x94\x91\xc1\x6a\xf3\x30\x10\x84\xef\x7a\x8a\xc5\xe4\xf0\x07\xf2\xcb\xf7\x40\x0f\xa5\x09\xa5\xd0\x36\xa5\xf5\x03\x44\xb1\xb6\xb6\x9a\x58\x32\xd2\xba\x10\x8c\xde\xbd\x2b\x5b\x09\x3d\xe4\xd2\xd3\xa2\x61\xf6\x9b\x1d\xbb\x2c\x37\xbb\xd7\x5d\xb5\xdd\x3c\x55\x40\xad\x09\x50\x3b\x8d\xc0\xb3\x41\x8b\x5e\x11\x6a\x38\x9c\xe1\x2b\x38\x1b\xea\x16\x3b\x75\xd5\x45\xaf\xea\xa3\x6a\x10\xbc\x1b\x08\xbd\x10\xa6\xeb\x9d\x27\x28\x1a\x43\xed\x70\x90\xb5\xeb\xca\xc6\xfd\xef\x94\x27\x63\x4d\x99\x67\x21\xc4\xb7\xf2\xa0\x20\x90\x37\xb6\x11\xe2\x73\xb0\x35\xbc\x27\xc4\x3f\x0f\xd9\x24\xa7\xb7\x5f\xc2\x28\xc6\xd1\x2b\xcb\x21\x0b\xab\x3a\x5c\xc1\x22\x1f\xb1\xbe\x03\xf9\xe6\x5d\x8f\xec\xc7\x20\x3f\x26\x35\xc4\x78\xb5\x1b\xf6\x9e\x8c\x3d\x26\x67\x5e\x92\xcf\xfc\x66\x0f\x80\x97\xf7\x5a\xcf\x99\xc5\x38\x4e\x3e\xf9\x82\xd4\x3a\x1d\x63\xb1\x82\xab\xb6\xb5\xba\x77\xc6\xd2\xa4\x5e\xc4\xca\xd0\x09\x63\x5c\xf2\x69\x68\x75\x8a\x9c\x46\x14\x7f\xbd\x55\xd0\xb9\xc7\x84\xcd\xe7\x65\x70\xfa\x32\x43\x4d\x37\xba\xf7\x33\xe4\xfc\xbb\xd3\x4d\x30\x30\x35\x58\x75\xc4\xca\x3d\xf0\xea\x69\x26\x30\x9a\xc3\x2e\x10\x59\x71\xba\x7c\x74\xac\xee\xd3\xdf\x5d\xa7\xd6\xb3\xad\xd8\xe7\x4e\x22\x5e\x4a\x8a\x9f\x00\x00\x00\xff\xff\x6b\x5a\x47\x4f\x27\x02\x00\x00")

func GeneratorSchemaGoTmplBytes() ([]byte, error) {
	return bindataRead(
		_GeneratorSchemaGoTmpl,
		"../generator/schema.go.tmpl",
	)
}

func GeneratorSchemaGoTmpl() (*asset, error) {
	bytes, err := GeneratorSchemaGoTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../generator/schema.go.tmpl", size: 551, mode: os.FileMode(420), modTime: time.Unix(1438307529, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"../generator/schema.go.tmpl": GeneratorSchemaGoTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"..": &bintree{nil, map[string]*bintree{
		"generator": &bintree{nil, map[string]*bintree{
			"schema.go.tmpl": &bintree{GeneratorSchemaGoTmpl, map[string]*bintree{
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, path.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        // File
        if err != nil {
                return RestoreAsset(dir, name)
        }
        // Dir
        for _, child := range children {
                err = RestoreAssets(dir, path.Join(name, child))
                if err != nil {
                        return err
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

