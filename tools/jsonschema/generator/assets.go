// Code generated by go-bindata.
// sources:
// assets/routing.go.tmpl
// assets/validator.go
// DO NOT EDIT!

package generator

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path"
	"path/filepath"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsRoutingGoTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x54\xcb\x6e\xdb\x30\x10\xbc\xf3\x2b\xb6\x82\x0f\x16\xe0\xd2\xf7\x00\x39\x14\x4e\x50\x04\x68\x9a\xa2\x15\x7a\x29\x0a\x84\x91\xd6\x36\x6b\x8b\x14\x48\x2a\xa8\x21\xf0\xdf\xbb\x7c\x48\xb1\x13\x1d\x8a\x9c\x28\x0d\x77\x66\x76\x67\x65\xaf\xd7\xb0\xd1\x0d\xc2\x0e\x15\x1a\xe1\xb0\x81\xa7\x13\xfc\xb1\x5a\xd9\x7a\x8f\xad\xe0\x8c\x0a\x6e\x1e\xe0\xeb\x43\x05\xb7\x37\x77\xd5\x07\xc6\x3a\x51\x1f\xc4\x0e\x61\x18\x78\x7e\xf4\x9e\x31\xd9\x76\xda\x38\x28\x76\xd2\xed\xfb\x27\x5e\xeb\x76\xbd\xd3\x1f\x5b\x61\x9c\x54\x72\x9d\xcf\x82\xb1\x6d\xaf\x6a\xf8\xae\x7b\x87\x4b\x03\x19\xe6\xf1\xdd\x94\x30\xb0\x61\x30\x42\x91\xf8\x42\x89\x16\x57\xb0\x48\x5d\xc0\xd5\x35\xf0\xdc\xd0\x37\xa3\x3b\x24\x1a\x5a\xfe\x23\x22\xd6\xfb\x89\x25\x89\x72\x94\xea\x10\x08\x99\xcb\xbf\xd0\x3b\xd5\x00\x18\xfe\xa9\x69\x92\x75\x31\x0c\xb1\x8e\xdf\xa3\xdb\xeb\xc6\xfb\x62\x05\x13\x76\xab\x9a\x4e\x4b\xe5\x22\x3a\x82\x95\x74\x47\x1a\xb4\xa4\x0e\x51\x35\xc1\x32\x1e\x34\xf9\xfb\x5a\x66\xee\xd4\x85\x0c\xc7\x2e\xb3\x3e\x58\x67\xfa\xda\xcd\x24\xd1\x25\x91\xd3\xf9\x68\xb3\xc2\x40\xaa\x56\x89\x03\x56\x7a\x43\xd4\x63\x52\x20\x69\x32\x1b\x45\x78\x45\xee\xfc\xb3\x26\xf4\x31\x2c\xfb\x2a\x0c\x9f\xca\x8a\xc7\x3c\x1a\x8b\xb3\x2d\xa4\xb2\x4e\xa8\x1a\x83\xef\x56\x1a\xeb\x36\x7b\x61\xe0\x55\xdb\x69\xad\xcb\xb3\xf2\xe4\x77\x59\x55\xc2\x4f\x71\x94\x0d\x7d\x65\xcb\x12\x96\x68\x8c\x85\x5f\xbf\xe9\xd0\x71\xf5\x00\x11\xb9\x1e\xb1\xf7\x47\x40\xc6\xcf\xd4\x23\x55\xcd\xe5\x10\x03\x92\xdb\x17\x39\x7e\xe7\xb0\x4d\xc9\xbd\xb9\xba\x17\x7f\xcf\x6f\x01\x46\xe0\x72\x56\x9e\x2c\xbd\x5f\x5d\xa4\xfc\xc2\x2e\x57\x59\x3d\x45\x3b\xe7\x24\xd5\x2b\xa7\x0c\xfc\x9f\xd3\xc4\x7e\xe3\x34\x3e\x4d\x5f\x2c\xfd\x12\xd0\xf5\x46\xc5\xbc\xd9\x74\x11\xb6\xcd\x9f\xd3\x82\xb4\x09\x7f\x0a\x84\xfd\x0b\x00\x00\xff\xff\xb0\x4a\xe6\x94\x1f\x04\x00\x00")

func assetsRoutingGoTmplBytes() ([]byte, error) {
	return bindataRead(
		_assetsRoutingGoTmpl,
		"assets/routing.go.tmpl",
	)
}

func assetsRoutingGoTmpl() (*asset, error) {
	bytes, err := assetsRoutingGoTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/routing.go.tmpl", size: 1055, mode: os.FileMode(420), modTime: time.Unix(1438331837, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _assetsValidatorGo = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x94\x90\xc1\x6a\x84\x30\x10\x86\xcf\xe6\x29\x06\xa1\xa0\x20\xfb\x00\x4b\xdb\x5b\x0f\x85\xee\xa9\xc7\xd2\x43\xaa\x89\x1d\x6a\xb2\x12\x27\xb0\x8b\xf8\xee\x9d\x24\xae\xb8\x07\x59\xf4\x60\x86\x64\xfe\x99\xff\xff\x7a\x59\xff\xc9\x56\x41\xe3\x8d\xb9\x0a\x81\xa6\x3f\x3b\x82\x5c\x1b\xca\x85\xa0\x6b\xaf\xe0\x24\x2f\xef\xa4\xcc\xf0\xe6\xdc\xd9\xc1\x40\xce\xd7\x04\xa3\xc8\xf8\x1e\xf8\x43\x4b\x22\xfb\x50\xb6\xa5\xdf\x58\x4f\x42\x68\x6f\x6b\x28\x94\x73\xf7\xda\x12\xe2\x51\x94\x61\x08\xda\x36\x0c\x71\x8a\xbc\xb3\xc0\xeb\x0e\x9f\x3d\x5f\x92\x2e\xf2\x59\x14\x9b\x8f\xf0\xd4\x00\x0e\xd0\x28\x8d\x56\x35\x20\x07\x30\xf2\x52\xc1\x8f\x27\x90\x35\x79\xd9\x71\x43\x5e\x01\x2f\x3b\x9c\xc2\x43\x28\x92\x9b\x72\xb1\x72\x73\x51\x60\xf8\xc3\xd7\x37\xef\x51\x4e\xcb\x5a\x8d\x53\x15\xe6\x05\xe3\x65\x90\x72\x40\x36\xd5\xa5\x34\xc7\x17\xe0\x2a\x89\x4a\x91\xa1\x86\xf9\xe1\x35\x6a\xb8\xf1\x66\xff\x2e\xe6\x18\x0d\xa6\xd6\x49\x64\xd3\x12\xd2\x62\x17\x2c\x25\xa8\x68\x97\x8c\x6b\xa6\x68\x1f\x33\x4d\xd2\x9d\x4c\x57\xfb\x76\x31\x45\xbb\xc1\x74\x76\xb1\xc1\x94\x73\xec\x63\xfa\x1c\x35\x6b\xa6\xeb\x98\xa3\x09\x3e\x36\x99\xfe\x07\x00\x00\xff\xff\x07\x9a\x95\xcb\xc5\x02\x00\x00")

func assetsValidatorGoBytes() ([]byte, error) {
	return bindataRead(
		_assetsValidatorGo,
		"assets/validator.go",
	)
}

func assetsValidatorGo() (*asset, error) {
	bytes, err := assetsValidatorGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/validator.go", size: 709, mode: os.FileMode(420), modTime: time.Unix(1438331082, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/routing.go.tmpl": assetsRoutingGoTmpl,
	"assets/validator.go": assetsValidatorGo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"routing.go.tmpl": &bintree{assetsRoutingGoTmpl, map[string]*bintree{
		}},
		"validator.go": &bintree{assetsValidatorGo, map[string]*bintree{
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, path.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        // File
        if err != nil {
                return RestoreAsset(dir, name)
        }
        // Dir
        for _, child := range children {
                err = RestoreAssets(dir, path.Join(name, child))
                if err != nil {
                        return err
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

