// Code generated by go-bindata.
// sources:
// assets/routing.go.tmpl
// assets/validator.go
// DO NOT EDIT!

package generator

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path"
	"path/filepath"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsRoutingGoTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb4\x56\x5f\x6f\xda\x3e\x14\x7d\xcf\xa7\xb8\x8d\xfa\x40\x24\x7e\xe6\xbd\x3f\xf1\x30\xb5\xd5\x54\x69\x85\x69\x63\x7b\x99\x26\xd5\x4d\x0c\x78\x24\x76\x66\x3b\x08\x14\xe5\xbb\xef\xfa\x4f\x42\xd2\xc1\x8a\x3a\xc6\x4b\x9c\xeb\x73\xcf\x39\xf7\x0f\x88\xc9\x04\x6e\x65\xc6\x60\xc5\x04\x53\xd4\xb0\x0c\x9e\xf7\xf0\x43\x4b\xa1\xd3\x35\x2b\x28\x89\x10\x70\x37\x87\xd9\x7c\x01\xf7\x77\x0f\x8b\xab\x28\x2a\x69\xba\xa1\x2b\x06\x75\x4d\xc2\xb1\x69\xa2\x88\x17\xa5\x54\x06\xe2\x15\x37\xeb\xea\x99\xa4\xb2\x98\xac\xe4\x7f\x05\x55\x86\x0b\x3e\x09\xcf\x38\x8a\x96\x95\x48\xe1\x93\xac\x0c\x1b\x29\x08\x61\xe2\xde\x55\x02\x75\x54\xd7\x8a\x0a\x24\xbf\x16\xb4\x60\x63\xb8\xf6\x2e\xe0\x66\x0a\x24\x18\xfa\xa8\x64\xc9\x30\x8d\x69\xf2\xd9\x45\x74\xd3\x74\x59\x1c\x53\x72\x2e\x36\x36\x21\xe4\x92\x0f\xf8\x8e\x18\x00\x45\xde\x65\x99\x97\x8e\xeb\xda\xe1\xc8\x23\x33\x6b\x99\x35\x4d\x3c\x86\x2e\x76\x2f\xb2\x52\x72\x61\x5c\xb4\x0d\x2e\xb8\xc9\xb1\xd0\x04\x1d\x32\x91\x59\x49\xf7\xc0\xca\xdf\x66\x19\xd3\x02\x72\x86\x69\x16\xad\x05\xdd\xb0\x85\xbc\xc5\xd7\xdc\x93\x21\xca\xec\x4b\xdb\xe9\xb6\x96\xe0\x02\xb4\x51\x55\x6a\x8e\xf4\xab\xf4\x52\xfb\x7e\x03\x8e\xca\x03\xb2\x1e\x53\xb4\x62\x2d\x09\x59\xa0\x3a\x79\x2f\x31\xfa\x64\x57\xe2\xc6\xb6\xc8\xc3\xe2\xa7\xd0\x80\xc8\x75\xe0\x9a\x0b\x6d\xa8\x48\x5d\x21\x4b\xae\xb4\xb9\x5d\x53\x05\x2f\x6c\xfb\xe1\x8f\x7a\x70\xaf\x37\x44\x25\xf0\x95\xe6\x3c\xc3\x5d\x1c\x25\x30\x62\x4a\x69\xf8\xf6\x1d\x1f\xd2\x2d\x08\x80\x8b\xa0\x4c\x08\xd6\xb6\x96\x2d\x8a\x6d\x7d\x96\x54\x6d\xbe\x54\x6f\x6e\x0f\x9a\xb2\x94\xa7\xa6\x02\x3d\xb1\xe9\x41\xae\x8e\x07\x43\xed\xb6\x0a\xa9\xf0\xec\x7b\xce\x97\xf0\xa2\xbf\x0f\x7a\x56\x15\x4c\xf1\xd4\x11\xff\x86\x79\xac\x72\xc3\xcb\x9c\xcd\x97\xe1\x1e\x00\xef\xb1\x74\xeb\xae\xb3\xd1\x83\x0d\xfb\x4b\x5a\xfd\xf1\x60\xb2\x7d\xd6\xe4\x7f\x47\x77\x35\x05\xc1\x73\xd7\x62\xff\x71\x8d\x9e\x02\x2d\x4b\x9c\xb4\x1b\xc4\xd8\xc6\x92\x00\x68\xba\x6f\xc2\xd0\x2f\xdd\xf1\xa2\x2a\xfe\x6c\xd6\x63\xce\x73\xda\xf2\x0d\xc3\xf7\xbb\x34\xaf\x34\xdf\xb2\xee\xfe\xc2\x65\xe0\xef\xd2\xab\x65\x78\xcc\x79\x65\xb4\x7c\xa7\xca\x68\xef\xff\xb2\x0c\xb7\x64\x87\xd3\xa0\xa6\x07\xc3\x0a\x7d\x62\xcb\xe8\xae\x7f\x7b\x72\x6c\x0e\x74\xee\xdc\x02\xe3\xc5\x07\x73\x86\xd3\x00\x3a\x77\x34\xff\xc4\xe9\x17\xc1\x7f\x56\xec\x75\xb3\x3d\xdc\x09\xbf\x97\xdb\x89\x43\x44\x31\x53\x29\xe1\x28\xa2\x43\x1c\x0f\xa4\x73\x66\xff\x18\x60\xec\x57\x00\x00\x00\xff\xff\x75\x6c\x89\xac\x23\x08\x00\x00")

func assetsRoutingGoTmplBytes() ([]byte, error) {
	return bindataRead(
		_assetsRoutingGoTmpl,
		"assets/routing.go.tmpl",
	)
}

func assetsRoutingGoTmpl() (*asset, error) {
	bytes, err := assetsRoutingGoTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/routing.go.tmpl", size: 2083, mode: os.FileMode(420), modTime: time.Unix(1438584617, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _assetsValidatorGo = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x55\xcf\x6b\xdb\x30\x14\x3e\x5b\x7f\xc5\x5b\x20\x60\x33\x53\x36\x18\x3b\x94\x66\xa7\xf5\x30\x58\xb7\x41\xd9\x2e\xa5\x0c\xd5\x91\x5a\x31\x5b\xf6\x6c\x29\x6b\x09\xf9\xdf\xf7\x9e\x64\xcb\x72\x9a\x34\xc9\x58\x0e\xb1\xfd\x7e\xe9\xfb\x3e\x3d\x3d\x35\xbc\xf8\xc5\xef\x05\x2c\x6d\x55\x3d\x31\xa6\xaa\xa6\x6e\x0d\xcc\x64\x65\x66\x8c\x99\xa7\x46\xc0\x0f\x5e\xaa\x25\x37\x75\x0b\x9d\x69\x6d\x61\x60\xcd\x92\xeb\xe2\x41\x54\xfc\x0b\xaf\x44\x0e\xdf\xda\xba\x11\xad\x79\xa2\x2f\x0a\x51\xfa\x9e\x6d\x18\x93\x56\x17\x90\xae\x60\x35\xa4\x67\x70\x65\x4b\xa3\x9a\x52\x7c\x95\xe9\x52\x48\xa5\xc5\x12\x64\x59\x73\xf3\xfe\x5d\x0e\x5d\x23\x0a\x25\x15\x9a\x94\x36\xa2\x95\xbc\x10\xeb\x4d\x06\xa2\x6d\x71\x61\x5c\xb1\x83\xf3\xc5\x10\x9d\x86\xe0\x8c\x25\xad\xa8\x94\x5e\x8a\x96\xfc\x1d\xcc\xa1\xaf\xcc\x12\x25\x21\xf8\x5e\x2d\xe0\x0d\x55\xc1\x68\x63\x5b\x1d\x21\xb9\xa4\x05\xd6\xab\x08\xc0\x86\x25\x1b\x36\x04\x6a\x55\xee\x23\xc3\x1f\x55\x65\xab\x74\x27\xf0\x1c\x2a\xef\x1e\x09\x8a\xc7\xa2\xb4\x9d\x5a\x09\xb8\xab\xeb\x32\x62\x86\x38\xc7\x1a\x1f\x42\x62\x8c\xd6\x9b\x3c\xd4\x10\x1b\xd6\x88\x6a\x1f\x8b\x5d\x69\x87\xfd\xe4\x5d\x98\x60\xbd\x18\xb4\x9e\x60\x75\xa5\x3d\xd4\xde\x7d\x40\x5b\xd7\x64\x48\xf1\x93\x11\x55\xe7\x12\xa3\x46\x43\x3b\xe0\x0f\xd1\xb0\xe4\xb3\xd0\xf7\xe6\xc1\xbd\x07\x5a\x88\x6c\x9a\x9b\x81\x7b\xa4\x59\xdf\x8a\x54\xa4\x5f\x0f\x7b\xfa\xec\xba\x41\xa3\x91\xe9\xac\x4f\x72\xc1\xe7\x30\x47\xc2\x5d\xa0\xc3\x3b\x92\x36\x87\x3b\x6b\x80\x17\xc6\xf2\x12\x03\x66\x39\xc9\x70\x76\x45\x0e\x7a\xf1\x68\xb2\x00\x65\x40\x91\x62\x2a\x61\xcc\x41\xd1\x27\xdc\xdc\xee\x96\xb2\xf4\x6c\xb0\x6b\xf1\x2d\x75\xb1\x99\x13\xb8\x77\xb8\x4e\xd8\xea\x82\x91\xe6\xda\x01\xf4\xa1\xfb\x45\x55\x3a\x70\x8c\x35\x55\xfa\xb0\xa6\x3e\xf5\x44\x4d\xa3\xf5\x4e\xd2\x54\xe9\x3d\x9a\xf6\x28\x52\x3c\xc6\xff\x43\xd3\x0b\xa0\x42\xd3\x6e\x8d\x35\x25\x1c\x07\x34\xfd\xae\xd5\x6f\x2b\x76\xc9\x4a\xb6\xf8\xd8\x4c\x05\xdd\xca\x3b\x56\xd2\xad\x34\x54\x75\xe5\x54\xb5\x4d\xa9\x0a\x6e\xc4\x20\x21\x45\x8c\xba\x8d\x59\x5d\xfa\xb2\x62\x12\x1f\xca\xcb\x4a\xb2\xb5\x5c\xe3\x5d\xe0\x53\xbc\x4c\x9d\x71\x93\xd7\x99\x6e\xd4\xeb\xb7\xe7\xb7\x68\xa6\xac\x9f\x39\x90\x77\xcc\xf2\xb1\x94\x45\x8a\xbb\x8a\x8b\x85\x8f\x71\xc6\x81\xdf\x16\xa5\x35\x45\x6e\x28\x80\xfe\x5e\x1a\x10\x61\x06\xc6\x17\xd1\x38\x0d\xaf\xa6\x13\x97\x25\x97\x61\xe2\x86\x1f\x8d\xde\x67\xc3\x23\xd4\x3d\x76\x53\xe6\xf2\x79\x67\xfb\x41\x4c\xdd\x3d\x0e\xc8\xb9\xec\x77\xe7\xe3\x30\x08\xe9\xe3\x7a\xbc\xbc\x02\xb9\xe9\x75\x14\xf1\x0b\x97\x2f\x4b\x42\x91\x50\x20\x50\x9d\x32\x9a\x16\x3b\x96\x94\x79\x10\x74\x45\x58\x01\xb5\x84\x79\x87\x9d\xec\xfe\x91\x5c\x5f\xcf\xd9\xe5\x36\xc7\x3f\x0a\xcf\xd5\x6e\xa2\x01\xfb\xd9\x08\x29\x8b\x87\xd3\xae\x0d\x3d\x9a\x65\x94\x7e\xc2\x7c\x0a\x39\x78\x92\x9e\xed\xa2\x77\xff\xc3\x2e\xfe\x0d\x00\x00\xff\xff\x1e\xf8\x67\xe2\x45\x09\x00\x00")

func assetsValidatorGoBytes() ([]byte, error) {
	return bindataRead(
		_assetsValidatorGo,
		"assets/validator.go",
	)
}

func assetsValidatorGo() (*asset, error) {
	bytes, err := assetsValidatorGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/validator.go", size: 2373, mode: os.FileMode(420), modTime: time.Unix(1438584062, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/routing.go.tmpl": assetsRoutingGoTmpl,
	"assets/validator.go": assetsValidatorGo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"routing.go.tmpl": &bintree{assetsRoutingGoTmpl, map[string]*bintree{
		}},
		"validator.go": &bintree{assetsValidatorGo, map[string]*bintree{
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, path.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        // File
        if err != nil {
                return RestoreAsset(dir, name)
        }
        // Dir
        for _, child := range children {
                err = RestoreAssets(dir, path.Join(name, child))
                if err != nil {
                        return err
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

