// Code generated by jsonschema.
// DO NOT EDIT!

package {{.package}}

{{range $name, $schema := .schema.Properties.Schemas}}
{{$schemaName := snakeToCamel $name}}
{{$instance := firstChar $schema.Title}}
func ({{$instance}} {{$schema.Title}}) Validate() (errs []error) {
  errs := []error{}
  var validator Validator
{{range $name, $property := $schema.Properties.Schemas}}{{$var := snakeToCamel $name}}
  validator = Validator{"{{$schemaName}}", "{{$var}}"}
  {{if $property.Type.Contains "integer" "number"}}
    {{if $property.MultipleOf}}
    if err := validator.MultipleOf({{$instance}}.{{$var}}, {{$property.MultipleOf}}); err != nil {
      errs = append(errs, err)
    }{{end}}{{if $property.Maximum}}
    if err := validator.Maximum({{$instance}}.{{$var}}, {{$property.Maximum}}, {{$property.ExclusiveMaximum}}); err != nil {
      errs = append(errs, err)
    }{{end}}{{if $property.Minimum}}
    if err := validator.Minimum({{$instance}}.{{$var}}, {{$property.Minimum}}, {{$property.ExclusiveMinimum}}); err != nil {
      errs = append(errs, err)
    }{{end}}
  {{end}}
  {{if $property.Type.Contains "string"}}
    {{if $property.MaxLength}}
    if err := validator.MaxLength({{$instance}}.{{$var}}, {{$property.MaxLength}}); err != nil {
      errs = append(errs, err)
    }
    {{end}}
    {{if $property.MinLength}}
    if err := validator.MinLength({{$instance}}.{{$var}}, {{$property.MinLength}}); err != nil {
      errs = append(errs, err)
    }
    {{end}}
    {{if $property.Pattern}}
    if err := validator.Pattern({{$instance}}.{{$var}}, "{{$property.Pattern}}"); err != nil {
      errs = append(errs, err)
    }
    {{end}}
  {{end}}
  {{if $property.Items}}
    {{if $property.MaxItems}}
      if err := validator.MaxItems({{$instance}}.{{$var}}, {{$property.MaxItems}}); err != nil {
        errs = append(errs, err)
      }{{end}}{{if $property.MinItems}}
      if err := validator.MinItems({{$instance}}.{{$var}}, {{$property.MinItems}}); err != nil {
        errs = append(errs, err)
      }{{end}}{{if $property.UniqueItems}}
      if err := validator.UniqueItems({{$instance}}.{{$var}}); err != nil {
        errs = append(errs, err)
      }{{end}}
  {{end}}
{{end}}
  return errs
}
{{end}}
