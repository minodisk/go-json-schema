// Code generated by go-bindata.
// sources:
// fixtures/schema.md.tmpl
// DO NOT EDIT!

package doc

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path"
	"path/filepath"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _fixturesSchemaMdTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x54\x4d\x8f\xd3\x30\x10\xbd\xfb\x57\x58\xdb\x3d\x40\xc5\xa6\xda\x6b\x25\x2e\xc0\xa2\x1e\x40\x94\x6d\x6f\x08\x29\xd6\xc6\x34\x16\xad\x1d\xec\xa9\x44\x15\xe5\xbf\x33\x8e\xed\xc6\x76\x12\x3e\xc4\x75\x7b\x69\xec\x79\x7e\x33\xef\xf9\x25\x0b\xda\xb6\xc5\x5e\xc0\x91\x77\x1d\xc1\xc7\x77\xdc\x3c\x69\xd1\x80\x50\x12\x37\x70\x47\x33\x79\xe0\xf4\x56\xb2\x13\x7f\x45\x6f\xcd\x53\xcd\x4f\x8c\xae\x5f\xd3\x62\xab\x55\xc3\x35\x08\x6e\x8a\x5d\xbf\x6b\xba\xee\x8e\x7e\x69\x5b\x0f\x0a\xac\x5f\x5f\xb4\xed\x59\x1f\x37\xcc\xd4\x34\x2b\xbd\x1c\xf8\x05\x92\x1f\x85\xfc\x6e\xa9\x03\xea\x03\xae\x91\x94\x52\x47\x6b\xcb\xc5\x47\x0e\xb5\xaa\x1e\x64\xd5\x28\x21\x21\x63\x9f\x44\xd8\x26\x5c\x56\x5d\xe7\xff\xfe\x55\x13\x59\x58\x8f\xb2\xc9\xad\x33\xe2\xdb\x75\xd2\xc4\xb5\x01\x3c\x32\xb3\x1f\x60\x81\x84\x43\xa3\xb1\xc7\x8d\xab\x5d\x62\x2b\xa6\xcd\x5e\x2e\xb1\x97\x3d\xd5\x75\xcb\xa5\x9f\x28\x9c\x4e\x9b\x5b\x0f\xb1\x2e\x0d\x96\x36\x9c\x55\xd3\x38\x7a\x43\xf1\x77\xd3\x7b\xe4\x2d\x4b\x28\x1f\x7e\xb2\x53\x63\xe5\x5b\x3a\xbf\x58\xd3\x12\x87\x18\x43\xca\x19\x8e\xfd\xa5\xf1\x04\xf6\x69\x4d\xe3\xc3\xae\x36\x73\x70\xcb\x00\xb8\xf6\x5a\xfc\x02\x9b\xaf\x62\x82\x2b\x66\x35\xd7\xfe\xbd\xd2\x27\x06\x8e\xc4\x3d\xa7\x23\x84\xfa\xcc\xf1\x47\xf4\xee\x93\x3c\x5e\x1c\x41\x58\xa5\x14\x03\x26\x4b\xde\xdf\x84\x9d\x90\x85\xcb\xdb\x64\x96\x43\xec\xfa\x62\x1e\xba\xf1\x26\x49\x55\xf4\x00\x17\x9f\x68\x98\xa9\xd4\x45\xc8\xe7\xe8\xfd\x47\xf4\x92\xef\x4e\x59\x96\x35\x40\x43\xd2\xcb\x45\xd2\xb0\xe1\x05\x0c\xd7\x1d\x0a\x9f\xcf\x5c\x5f\x76\xa0\x85\x3c\x20\x7c\xb3\xdf\x6f\x57\xf7\xc5\x7d\x74\xa9\xf8\xf9\x7b\xe4\x3f\xce\xdc\xc0\x1b\x55\xd9\xe0\xbd\x55\x12\xb8\x84\xbb\xab\xd0\x1e\xe6\x31\xbe\xe8\x24\x87\xe9\x36\xca\xb8\x57\xc1\xe7\xd1\xae\x93\xe0\x8c\x7a\x90\x8c\xd6\x6d\x47\x6a\xc9\x55\x72\x18\x39\x9a\xc4\x34\x0a\x23\xb1\x03\x06\x67\x13\x79\x10\x0a\xf8\x12\x19\x25\xb7\xb5\x66\x86\x8f\xc7\x70\x98\x3f\x68\x75\xa0\x29\xb1\xbf\xa5\x23\x39\xc3\x48\x57\x76\xaf\xbf\x02\x00\x00\xff\xff\xd8\x1a\x30\x06\x43\x07\x00\x00")

func fixturesSchemaMdTmplBytes() ([]byte, error) {
	return bindataRead(
		_fixturesSchemaMdTmpl,
		"fixtures/schema.md.tmpl",
	)
}

func fixturesSchemaMdTmpl() (*asset, error) {
	bytes, err := fixturesSchemaMdTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "fixtures/schema.md.tmpl", size: 1859, mode: os.FileMode(420), modTime: time.Unix(1436157593, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"fixtures/schema.md.tmpl": fixturesSchemaMdTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"fixtures": &bintree{nil, map[string]*bintree{
		"schema.md.tmpl": &bintree{fixturesSchemaMdTmpl, map[string]*bintree{
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, path.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        // File
        if err != nil {
                return RestoreAsset(dir, name)
        }
        // Dir
        for _, child := range children {
                err = RestoreAssets(dir, path.Join(name, child))
                if err != nil {
                        return err
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

