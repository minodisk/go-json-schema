// Code generated by go-bindata.
// sources:
// fixtures/schema.md.tmpl
// DO NOT EDIT!

package doc

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path"
	"path/filepath"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _fixturesSchemaMdTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x54\xc1\x8e\xd3\x30\x10\xbd\xfb\x2b\x2c\x75\x0f\xb0\x62\x53\xed\xb5\x12\x17\x60\x51\x0f\x20\xca\xb6\x37\x84\x14\x6b\x33\x6c\x2c\x5a\x3b\xd8\x53\x89\x2a\xca\xbf\x63\xc7\x76\x62\x3b\x09\x94\xfb\x9e\x6a\xcf\xbc\x79\x33\x6f\xfc\x9a\x15\x6d\xdb\xe2\xc0\xf1\x08\x5d\x47\xcc\xf1\x03\xe8\x27\xc5\x1b\xe4\x52\x98\x80\x89\x28\x26\x9e\x81\xde\x08\x76\x82\x37\xf4\x46\x3f\xd5\x70\x62\x74\xf3\x96\x16\x3b\x25\x1b\x50\xc8\x41\x17\xfb\x3e\xaa\xbb\xee\x8e\x7e\x6b\x5b\x0f\x0a\xac\xdf\x5f\xb5\xed\x59\x1d\xb7\x4c\xd7\x34\x4b\xbd\x1e\xf9\xb9\x21\x3f\x72\xf1\xd3\x52\x07\xd4\x27\x73\x37\xa4\x94\x3a\x5a\x9b\x2e\x3e\x03\xd6\xb2\x7a\x10\x55\x23\xb9\xc0\x8c\x7d\x16\x61\x9b\x80\xa8\xba\xce\xff\xfc\xaf\x26\xb2\xb2\x3b\xca\x26\xb7\x9b\xe1\x3f\x86\x49\x93\xad\x8d\xe0\xc9\x32\xfb\x01\x56\x86\x70\x6c\x34\xdd\x71\xe3\x72\x97\x78\x15\xf3\xcb\xbe\xbd\x35\xbd\x6c\x55\xd7\xd9\xa3\x1d\x28\x14\xa7\xbd\x37\x56\xc1\x7c\x6a\xdc\x4e\x52\xfe\xf0\x9b\x9d\x1a\xab\xd4\x6e\xdf\x5f\x36\xb4\x8c\x69\x06\x48\xb9\xc0\x71\xb8\x34\x9e\xc0\x9e\xd2\x19\x5c\x6e\xa1\x70\xc7\x10\x41\x09\x57\xeb\x2f\xa6\xf9\x3a\x26\x18\x30\xeb\xa5\xf6\x1f\xa5\x3a\x31\x74\x24\xee\x9c\x8e\x10\xf2\x0b\xe5\x8f\xc0\xaa\x2f\xe2\x78\x71\x04\xe1\x96\x52\x8c\x98\xcc\x64\xd7\xf8\x9a\x90\x95\xb3\xd6\xac\x6d\x83\xc3\xfa\x64\xee\xaf\x69\x90\xa4\x2a\x7a\x80\x73\x4a\x34\xcc\x9c\xc1\x22\xe4\x8b\xcb\xae\x73\x59\xf2\x35\x29\xcb\xb2\x46\x6c\x48\xfa\x8e\x86\x34\x04\xbc\x80\xf1\x65\x43\xe2\xeb\x19\xd4\x65\x8f\x8a\x8b\x67\x03\xdf\x1e\x0e\xbb\xf5\x7d\x71\x1f\xbd\x9f\xf9\xa8\x3d\xc2\xaf\x33\x68\x7c\x27\x2b\xeb\xb1\xf7\x52\x20\x08\xbc\x1b\x84\xf6\x30\x8f\xf1\x49\x27\x39\x4c\xb7\x95\xda\xb9\xde\x5b\xcf\xde\x13\x8f\x4c\x7a\x90\x8c\xd6\x85\x23\xb5\x64\x90\x1c\x46\x8e\x26\xd1\x8d\x14\x1a\xf6\xc8\xf0\xac\xa3\x1d\x84\x84\xf9\xbf\x68\x29\x76\xb5\x62\x1a\xa6\x63\x38\xcc\x3f\xb4\x3a\xd0\x9c\xd8\xbf\xd2\x91\x9c\x61\xa2\x2b\x7b\xd7\x3f\x01\x00\x00\xff\xff\x68\x1e\x7c\xde\x19\x07\x00\x00")

func fixturesSchemaMdTmplBytes() ([]byte, error) {
	return bindataRead(
		_fixturesSchemaMdTmpl,
		"fixtures/schema.md.tmpl",
	)
}

func fixturesSchemaMdTmpl() (*asset, error) {
	bytes, err := fixturesSchemaMdTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "fixtures/schema.md.tmpl", size: 1817, mode: os.FileMode(420), modTime: time.Unix(1435568161, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"fixtures/schema.md.tmpl": fixturesSchemaMdTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"fixtures": &bintree{nil, map[string]*bintree{
		"schema.md.tmpl": &bintree{fixturesSchemaMdTmpl, map[string]*bintree{
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, path.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        // File
        if err != nil {
                return RestoreAsset(dir, name)
        }
        // Dir
        for _, child := range children {
                err = RestoreAssets(dir, path.Join(name, child))
                if err != nil {
                        return err
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

