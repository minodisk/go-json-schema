// Code generated by go-bindata.
// sources:
// fixtures/schema.go.tmpl
// DO NOT EDIT!

package generator

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path"
	"path/filepath"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _fixturesSchemaGoTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x94\x91\x31\x6b\xc3\x30\x10\x85\x77\xfd\x8a\xc3\x64\x68\x20\x95\xf7\x40\x87\xd2\x84\x52\x68\x9b\xd2\xfa\x07\x44\xb1\xae\xb6\x9a\x58\x32\xd2\x79\x08\x46\xff\xbd\x27\x5b\x09\x1d\xb2\x74\x3a\xf4\x78\xf7\xbd\x7b\xa8\x2c\x37\xbb\xf7\x5d\xb5\xdd\xbc\x54\x40\xad\x09\x50\x3b\x8d\xc0\xb3\x41\x8b\x5e\x11\x6a\x38\x9c\xe1\x27\x38\x1b\xea\x16\x3b\x75\xd5\x45\xaf\xea\xa3\x6a\x10\xbc\x1b\x08\xbd\x10\xa6\xeb\x9d\x27\x28\x1a\x43\xed\x70\x90\xb5\xeb\xca\xc6\xdd\x77\xca\x93\xb1\xa6\xcc\xb3\x10\xe2\x7b\xb0\x35\x7c\xa6\xa5\x3b\x0f\x59\x96\xd3\xdb\x2f\x61\x14\xe3\xe8\x95\x65\xec\xc2\xaa\x0e\x57\xb0\xc8\xb1\xeb\x07\x90\x1f\xde\xf5\xc8\x7e\x0c\xf2\x6b\x52\x43\x8c\x57\xbb\x61\xef\xc9\xd8\x63\x72\xe6\x25\xf9\xca\x6f\xf6\x00\x78\xf9\xa8\xf5\x9c\x59\x8c\xe3\xe4\x93\x6f\x48\xad\xd3\x31\x16\x2b\xb8\x6a\x5b\xab\x7b\x67\x2c\x4d\xea\x45\xac\x0c\x9d\x30\xc6\x25\x9f\x86\x56\xa7\xc8\x69\x44\xf1\xdf\x5b\x05\x9d\x7b\x4c\xd8\x7c\x5e\x06\x43\x20\x3f\xd4\x74\xa3\x7b\x3f\x43\xce\x7f\x3b\xdd\x04\x03\x53\x83\x55\x47\xac\xdc\x13\xaf\x9e\x66\x02\xa3\x39\xec\x02\x91\x15\xa7\xcb\x67\xc7\xea\x3e\xfd\xe7\x3a\xb5\x9e\x6d\xc5\x3e\x77\x12\xf1\x52\x52\xfc\x06\x00\x00\xff\xff\x95\x44\x46\xd0\x19\x02\x00\x00")

func fixturesSchemaGoTmplBytes() ([]byte, error) {
	return bindataRead(
		_fixturesSchemaGoTmpl,
		"fixtures/schema.go.tmpl",
	)
}

func fixturesSchemaGoTmpl() (*asset, error) {
	bytes, err := fixturesSchemaGoTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "fixtures/schema.go.tmpl", size: 537, mode: os.FileMode(420), modTime: time.Unix(1438246935, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"fixtures/schema.go.tmpl": fixturesSchemaGoTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"fixtures": &bintree{nil, map[string]*bintree{
		"schema.go.tmpl": &bintree{fixturesSchemaGoTmpl, map[string]*bintree{
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, path.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        // File
        if err != nil {
                return RestoreAsset(dir, name)
        }
        // Dir
        for _, child := range children {
                err = RestoreAssets(dir, path.Join(name, child))
                if err != nil {
                        return err
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

