// Code generated by go-bindata.
// sources:
// fixtures/schema.go.tmpl
// DO NOT EDIT!

package generator

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path"
	"path/filepath"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _fixturesSchemaGoTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x94\x91\xc1\x6a\xfb\x30\x0c\xc6\xef\x7e\x0a\x11\x7a\xf8\x17\xfa\x77\xee\x85\x1d\xc6\x5a\xc6\x60\x5b\xc7\x96\x07\xa8\x1b\x6b\x89\xd7\xc6\x36\xb6\x72\x28\xc1\xef\x3e\x25\x71\xcb\x60\xbd\xec\x24\xf4\xf1\xe9\xf7\x49\x76\x59\x6e\x76\xaf\xbb\x6a\xbb\x79\xaa\x80\x5a\x13\xa1\x76\x1a\x81\x6b\x83\x16\x83\x22\xd4\x70\x38\xc3\x57\x74\x36\xd6\x2d\x76\xea\xaa\x0b\xaf\xea\xa3\x6a\x10\x82\xeb\x09\x83\x10\xa6\xf3\x2e\x10\x14\x8d\xa1\xb6\x3f\xc8\xda\x75\x65\xe3\xfe\x77\x2a\x90\xb1\xa6\xcc\xb5\x10\xe2\xb3\xb7\x35\xbc\x8f\x43\xff\x02\x64\x59\x4e\x7d\x58\xc2\x20\x86\x21\x28\xcb\xd8\x85\x55\x1d\xae\x60\x91\x63\xd7\x77\x20\xdf\x82\xf3\xc8\x7e\x8c\xf2\x63\x52\x63\x4a\x57\xbb\x61\xef\xc9\xd8\xe3\xe8\xcc\x43\xf2\x99\x7b\xf6\x00\x04\x79\xaf\xf5\x9c\x59\x0c\xc3\xe4\x93\x2f\x48\xad\xd3\x29\x15\x2b\xb8\x6a\x5b\xab\xbd\x33\x96\x26\x95\xc5\xcc\xa9\x0c\x9d\x30\x25\x79\xb1\xe5\x7e\xc9\xcb\xa2\xd5\xe3\x12\x53\x49\xe2\xaf\xdb\x0b\x3a\x7b\xfc\x1d\x04\x91\x42\x5f\xd3\x8d\xd7\xf0\x33\xe4\xfc\xf3\xca\x9b\x60\x60\x6a\xb4\xea\x88\x95\x7b\xe0\xd1\xd3\x4c\x60\x34\x87\x5d\x20\xb2\xe2\x74\xf9\xe8\x58\xdd\x8f\x3f\xbc\x1e\xdf\x61\xb6\x15\xfb\x7c\x93\x48\x97\x23\xc5\x77\x00\x00\x00\xff\xff\xf0\x48\x2f\x0c\x2b\x02\x00\x00")

func fixturesSchemaGoTmplBytes() ([]byte, error) {
	return bindataRead(
		_fixturesSchemaGoTmpl,
		"fixtures/schema.go.tmpl",
	)
}

func fixturesSchemaGoTmpl() (*asset, error) {
	bytes, err := fixturesSchemaGoTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "fixtures/schema.go.tmpl", size: 555, mode: os.FileMode(420), modTime: time.Unix(1438232964, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"fixtures/schema.go.tmpl": fixturesSchemaGoTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"fixtures": &bintree{nil, map[string]*bintree{
		"schema.go.tmpl": &bintree{fixturesSchemaGoTmpl, map[string]*bintree{
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, path.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        // File
        if err != nil {
                return RestoreAsset(dir, name)
        }
        // Dir
        for _, child := range children {
                err = RestoreAssets(dir, path.Join(name, child))
                if err != nil {
                        return err
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

